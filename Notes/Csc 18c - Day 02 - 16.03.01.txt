00:00:00	-	Due Dates - Finish Assignment 1 Due THURSDAY 11:59:59 PM

00:12:00	-	Big O and Efficencys of algorithems. 
				Efficiency of time and space.
				
				MergeSort O(n lg n) time			
						  O(n^2) space
			
00:15:37	- gmplib - 
				story of			Cout<<c(n,r),
				look up tables			n=250000
										r=100000
											fact(n){
													}
00:20:00	- Big O
				O(1)		- Constant time
				O(lg n)		- log n (log(base2) of n )
				O(n log n)	- n log n
				O(n)		- linear
				O(n^2)		- quadratic
				O(2^n)		- exponential
				
00:23:59	BIG O
			n	O(1)		O(log n)		O(n log n)		O(n)		O(n^2)		O(2^n)
			1	 1				0				0			  1			   1		   2
			2	 1				1				2			  2			   4		   4
			10	 1			  3.32			   33.2			 10			  100		  1024
		  1000	 1			  9.96			  9965.78		1000		  1000000	1.071509e+301
		  
		  
		  
00:??:00	- Big O
				O(1)		- add, is Empty, getSize 
				O(lg n)		- 
				O(n log n)	- 
				O(n)		- remove, contain, toArray
				O(n^2)		- 
				O(2^n)		-
				
				
00:45:12	- Consider:
				int n=10
				int s=0
				for(int i=0; i<n: i++){
					s=s+1:
				}
							what is s when 
							n=1		s=1
							n=10	s=10
							n=100	s=100
							n=1000	s=1000
							
00:57:40	- matrix multiplication				
				A = |1 2|	B=|5 6|
					|3 4|	  |7 8|
					
				AB = |1*5 + 2*7    1*6+2*8|
					 |3*5 + 4*7    3*6+4*8|
					 
				   = | 5+14    6+16| 	= |19 22|
					 |15+28   18+32| 	  |43 50|
				   
				   = |19 22|
					 |43 50|
					 
					 
					 O(n^3)
				for(i=0; i<n;i++){
					for(j=0;j<n;j++){
						c[i][j]=0;
							for(k=0;k<n;k++){
							C[i][j]=C[i][j]+a[i][k]*b[k][j];
							}//runs s times
					}//runs s times
				}//runs s times
				
				so: if 	n=100 	t=1
						n=200 	t=8		n doubeled so it should take 8 times longer

01:10:30	- Recursice Count Down
					
					count_down(int n){
						System.out.println(n);
						if(n>1){
						count_down(n-1);
						}
					}
					
					O(1+lg n) [Big o of 1 + log base 2 of n]
							n=2			c=2
							n=4			c=3
							n=8			c=4
							n=16		c=5
					
					