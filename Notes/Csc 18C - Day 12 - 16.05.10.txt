00:00:00	His Jeep

00:01:39	Trees:
			- A Heirachal data Structure
			
						Carol
					....|	|....				<---ROOT
					|			|
				kathy 			john			<---Children nodes of the root (Charol)
			....|	|....	....|	|....
			|			|	|			|
		  ann		george	martha		robert
			
			
			any node that dose not have child nodes is called a leaf...
00:06:00			
height of the tree =  the longest path in the general direction

00:18:50		Binary Search Tree

				1. First Item in a list is the root.
				2. if next item>root's value make next item node be the right side child.
				3. if next item<root's value make next item be the left side shild.
				
00:20:30	List of unsorted integers...
			13,5,16,7,8,3,12,4,20,14,1,9,20
			if its more than the roots value , go to the right
			if its less than the roots value, go to the left
			FIRST:		13
			SECOND:	  5
			
			THIRD:		13
					   5  16
					   
00:24:14			     13
					   5      16
					3    7		20
					 4	   8
						     12
							 
00:26:33	MAP COLORING:
			at 14:	

						  13
					   5          16
					3    7	   14	 20
				  1	 4	   8     15
						     12
							9
							
00:29:30	TRAVERSALS (3 different ones)
				In Order would arrange the whole tree in order.
				PRE-ORDER: we visit root, then the left most sub tree, 
							then the right most subtree
							(23.12 - Traversal of binary trees)

00:33:10		Pre:order 	- 13,5,3,1,4,9,12,8,7,16,14,15,20	(DEPHTH FIRST)

				IN-ORDER: 	- 1,3,4,5,7,8,9,12,13,14,15,16,20		
				POST-ORDER:	- 1,4,3,9,12,8,7,5,14,15,16,20,13
				
				REVIEW HOW TO RUN THIS STUPID THING				
				http://visualgo.net/bst - Binary Search Tree
				
00:54:29	op1 operator op2
			  a     +	  b              a + b * c
					
					+						    +
				...| |...					...| |...
				|		|					|		|
				a		b					*		a
										...| |...
										|		|
										b		c
										
00:57:33									6+5*3=21

00:58:30			+			How to interpret this as a tree
				...| |...		
				|		|
				*		6			6+5*3=21
			...| |...
			|		|
			5		3

01:01:36		(a+b)*(c+d)

				......*......		(3+5)*(4+6)
				|	  		|			8*10=80
				+	  		+
			...| |...	...| |...
			|		|	|		|
			a		b	c		d
			
01:04:13	Think of this in an inorder traversal...
					(a+b)*(c+d)		<--n fixed
					
				USE A STACK, TO THROW VALUES INTO IT, POP 2 WHEN YOU HAVE A OPPERATOR
01:05:40		 * + a b + c d		-POLISH NOTATION ROBERT BURST <--Pre Fixed
01:11:00		 a b + c d * <--POST ORDER
					
01:14:00	a * (b+c*d)/e

					.../...
					|	  |
					*	  e
				...| |...
				|		|
				a		+
					   | |
					   b *
						| |
						c d
						
01:16:40	c d * b + a * e / 		<-- PRE ORDER
			5 6 * 3 + 4 * 2 / = 66
01:18:40	With a stack explanation
						Tree implementation next class meeting.